- key: intro-to-covers
  title: Introduction
  shortTitle: Intro
  details: >

    Sherlock is a code audit marketplace which also provides a kind of optional
    warranty on the audited code in the form of an insurance cover. They employ
    top  rated code auditors called “Watsons” to audit smart contracts of
    protocols on the blockchain. Once the code is audited, Sherlock gives the
    protocol the option  to warrant the audited code by buying an insurance
    cover for the total value locked in the audited smart contracts. Ideally, in
    the case of an attack on the audited  protocol smart contract, an insurance
    claim can be made by the protocol to cover for their losses. This is a multi
    step process, involving some terms and conditions  which will be discussed
    later.


    In order to insure the audited smart contracts, Sherlock would need capital.
    Sherlock generates this capital by offering USDC staking in their
    application. The USDC  staking returns on Sherlock is one of the highest
    offered (11% APY), at the time of writing this guide. They provide this APY
    from a few streams, more on that later.  But note that in the event of a
    claim, upto 50% of the staked USDC can be slashed from the user. So it is a
    high risk- high reward investment. 

    Now that we have a brief understanding of what Sherlock does, let us get
    into details of their working.
     
- title: Cover
  shortTitle: Cover
  key: cover
  details: >
    ### Cover


    Protocols go to Sherlock to get their code audited. Once audited, the
    protocol can take the decision whether or not to opt for an insurance cover
    after conducting a bug  bounty program. Sherlock offers up to $5M in smart
    contract exploit coverage behind every audit (not included in audit cost),
    which can be activated at any point after the  audit is completed, provided
    there haven’t been subsequent changes to the code base.  


    Once an agreement for the insurance cover and the insurance premium has been
    reached depending on whether the protocol wants to hold a public audit
    contest (2% premium) or a  private audit contest (2.25% premium). Sherlock
    then calculates how much USDC must be charged per second for the insurance
    premium. Sherlock requires a month or so of upfront  payment before coverage
    can be activated. After that, it's up to the protocol team to pay bi-weekly,
    monthly, etc. Sherlock will charge the protocol every second; that is, the 
    active balance of the protocol will keep reducing each second. Each protocol
    is required to maintain a minimum active balance of 500 USDC and 12 hours of
    minimum time of coverage l eft (which could theoretically mean more than 500
    USDC depending on the size of the insurance cover). If a protocol falls
    below these requirements, it will be considered to have opted  out of the
    insurance policy. 


    In case sherlock does not have enough TVL to cover the insurance bought by a
    protocol, say the protocol is insured for 5 million USD but Sherlock only
    has 4 million TVL, then Sherlock  will not over-charge the protocol by
    charging them for a 4 million USD cover and not a 5 million USD cover.
- title: Staking mechanism and rewards
  shortTitle: staking mechanism
  key: staking-mechanism
  details: >
    ### Staking


    Users can deposit their USDC into Sherlock for fixed periods like 6 or 12
    months. For this, they reward the user with USDC rewards and SHER rewards.
    SHER is the governance token of Sherlock  protocol. On staking, the user
    accepts the risk that up to 50% of their staked USDC could be slashed in the
    case of one or multiple claim(s).


    ### Rewards


    The APY is generated for the user from three streams, * Premium paid by
    protocols * Yield generated by Sherlock by investing the staked USDC into
    protocols like Aave and Compound * SHER rewards


    The first source may vary due to factors like lack of TVL in Sherlock which
    would mean that the protocols pay lesser premiums which inturn would affect
    staking APY, or a claim event which could also affect the APY. The second
    source is variable since the yield from investment cannot be predicted
    accurately nor is it stable.  The third source of rewards is fixed in terms
    of the amount of SHER token the user will receive, but is variable in the
    context that the SHER token’s value could be varying.


    ### Unstaking and restaking


    After the lockup period has passed, a staker has the option to either
    unstake their position or restake their position. Either option will result
    in the owed SHER tokens being sent to the staker.


    After a staker's lockup period ends, they have two weeks to unstake their
    position. If they don't, their position will be automatically restaked for
    six months by an arbitrager. In return for paying the gas to  restake the
    position, the arbitrager will receive a portion of the stake's USDC. The
    reward for an arbitrager slowly increases over the course of a week, until
    it reaches the maximum reward rate of 20% of a staker's  USDC position. The
    SHER token rewards from the recent lockup period are still sent to the
    original staker, not the arbitrager. Note that users can only unstake their
    funds once the lockup period is over, unlike in  some DeFis where the user
    can unstake their tokens at will for some fee.

     
- key: sher-token
  title: SHER token
  shortTitle: SHER
  details: >
    ### SHER 

    SHER is Sherlock’s governance token, it is distributed to the users as
    reward for staking their USDC in Sherlock. The distribution of the SHER
    token follows the following curve. The SHER distribution rate will  start at
    a maximum when the TVL in Sherlock is zero and maintain constant until
    Sherlock reaches a certain TVL (a), after this point, the SHER distribution
    rate reduces linearly and eventually reaches zero at a  target TVL (b),
    beyond (b) no SHER will be distributed. 


    The same curve is used for every staking period and the period is used as a
    multiplier. This will result in the same APY for every staking period.
    Meaning, if the same amount of USDC is staked at the same point in  time but
    one for 6 months and another for 12, the 12 month stake will yield twice the
    amount of SHER. But it cannot be said that staking the same amount of USDC
    for 6 months twice will yield the same amount of SHER  as staking it for 12
    months at once since the SHER rate might have changed after the first 6
    months in the former case.


    The purpose of this curve is to ensure that Sherlock's TVL never falls below
    a certain level. If the current TVL changes, the starting point on the curve
    moves more to the left if the TVL drops and more to the right  if the TVL
    increases. SHER rewards are automatically increased (on a TVL drop) or
    decreased (on a TVL increase) as the point on the slope changes.
- title: Claims
  shortTitle: claims
  key: claims
  details: >
    ### Claim submission


    If an exploit is thought to have occurred at a covered protocol, the
    protocol can submit a claim to Sherlock. Sherlock's Watsons will first work
    alongside the core devs to mitigate the exploit if it is still live. Once
    the exploit has been mitigated, the Watsons will work to understand the
    exploit's cause and magnitude. Through this process, a protocol will have a
    good sense of whether the exploit experienced is covered by Sherlock, and
    thus a claim should be submitted. The Watsons will help with the general
    claim submission process as well as choosing the correct timestamp and
    amount that should be submitted.


    ### Claim evaluation


    First, the claim is evaluated by the SPCC (Sherlock Protocol Claims
    Committee) if happy with their verdict, the claim process ends here.


    If unhappy with SPCC’s verdict the protocol can either,  revise the amount
    of claim and resubmit   escalate the claim to the UMA optimistic oracle

    To escalate the claim to the UMA Optimistic Oracle. The covered protocol is
    required to “stake” a reasonable claim amount,  to escalate the claim above
    the SPCC, computed as follows: 


    ``Staked amount = 2 x (Sherlock's bond of 9600 USDC + UMA's final fee)``


    The escalation of the claim would move the decision-making process from
    Sherlock's hands into the hands of UMA's Optimistic Oracle. The  claims
    decision would be voted on by UMA tokenholders using UMA's Data Verification
    Mechanism, and the resolution of that vote would be binding.  If the covered
    protocol is proven correct, then the amount specified in the claim will be
    paid out to Sherlock. They will also receive the staked amount,  minus UMA's
    burned amount (half of Sherlock's bond of 9600 USDC + UMA's final fee). If
    the covered protocol's escalation is not successful, then the amount
    specified by  the claim is not paid out and the stake amount is not
    returned.


    ### Claim payment 


    When a claim has been made and it has gone through successfully, Sherlock
    will cover the amount using the USDC staked in their application. Each
    covered protocol will have a policy that is targeted to be 50% or  less of
    the total Sherlock staking pool. This ensures that any single exploit event
    an any single protocol can cause a payout for a maximum of 50% of the
    staking pool. More than 50% of the staking pool can be used  for a payout if
    multiple covered protocols experience covered hacks in a short timeframe.


    However, if the size of the exploit (specifically the funds lost) is smaller
    than the total coverage amount at a protocol, the size of the payout will be
    a fraction of the 50% maximum. Also, if an exploit becomes possible  on
    multiple protocols due to a chain bug (i.e. a bug in Ethereum L1), then no
    more than 50% of the staking pool can be used to repay those exploits, even
    if individual protocols had policies that aggregate to a sum that is  larger
    than 50% of the staking pool.
